@{
    Layout = "~/Views/Shared/_Index.cshtml";
 }
<div class="container-div">
    <div class="row">
        <div id="searchDiv" class="col-sm-12 hidden-xs">
            <div class="select-list">
                <ul>
                    <li>
                        任务ID：<input id="guid" col="Guid" type="text" />
                    </li>
                    <li>
                        任务名称：<input id="name" col="Name" type="text" />
                    </li>
                  @*  <li>
                        计划ID：<input id="taskId" col="TaskId" type="text" />
                    </li>*@
                  @*  <li>
                        计划名称：<input id="taskName" col="TaskName" type="text" />
                    </li>*@
                 @*   <li>
                        执行用户名：<input id="userName" col="UserName" type="text" />
                    </li>*@
                    <li>
                        <a id="btnSearch" class="btn btn-primary btn-sm" onclick="searchGrid()"><i class="fa fa-search"></i>&nbsp;搜索</a>
                    </li>
                </ul>
            </div>
        </div>
@*        <div class="btn-group-sm hidden-xs" id="toolbar">
            <a id="btnAdd" class="btn btn-success" onclick="showSaveForm(true)"><i class="fa fa-plus"></i> 新增</a>
            <a id="btnEdit" class="btn btn-primary disabled" onclick="showSaveForm(false)"><i class="fa fa-edit"></i> 修改</a>
            <a id="btnDelete" class="btn btn-danger disabled" onclick="deleteForm()"><i class="fa fa-remove"></i> 删除</a>
        </div>*@
        <div class="col-sm-12 select-table table-striped">
            <table id="gridTable" data-mobile-responsive="true"></table>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(function () {
        initGrid();
    });

    function initGrid() {
        var queryUrl = '@Url.Content("~/TestTaskManager/TaskExecRecord/GetPageListJson")';
        $('#gridTable').ysTable({
            url: queryUrl,
            toolbar: '#searchDiv',
            columns: [
               
                { field: 'Guid', title: '任务ID', width: '120px' },
                { field: 'TaskName', title: '计划名称', width: '120px', visible: false },
                { field: 'Name', title: '任务名称' },
                {
                    field: 'SourceType', title: '触发来源', width: '40px', formatter: function (value, row, index) {
                       
                        if(row.SourceType == "@TaskSourceType.AutoTask.ParseToInt()") {
                            return '<span>' + "@TaskSourceType.AutoTask.GetDescription()" + '</span>';
                        }
                        else if (row.SourceType == "@TaskSourceType.ManuallyTask.ParseToInt()") {
                            return '<span>' + "@TaskSourceType.ManuallyTask.GetDescription()" + '</span>';
                        }
                       
                    }
                },
                {
                    field: 'ExecStatus', title: '状态', width: '40px', formatter: function (value, row, index) {
                        if (row.ExecStatus == "@ExecStatusEnumType.Ready.ParseToInt()") {
                            return '<span class="badge badge-white">' + "待执行" + '</span>';

                            //if (row.IsConsumed == 1) {
                            //    return '<span class="badge badge-inverse">' + "队列中..." + '</span>';
                            //}
                            //else
                            //{
                            //    return '<span class="badge badge-white">' + "@ExecStatusEnumType.Ready.GetDescription()" + '</span>';
                            //}
                            
                        }
                        else if (row.ExecStatus == "@ExecStatusEnumType.Initing.ParseToInt()") {
                            return '<span class="badge badge-info">' + "@ExecStatusEnumType.Initing.GetDescription()" + '</span>';
                        }
                        else if (row.ExecStatus == "@ExecStatusEnumType.Running.ParseToInt()") {
                            return '<span class="badge badge-primary">' + "@ExecStatusEnumType.Running.GetDescription()" + '</span>';
                        }
                        else if (row.ExecStatus == "@ExecStatusEnumType.Paused.ParseToInt()") {
                            return '<span class="badge badge-disable">' + "@ExecStatusEnumType.Paused.GetDescription()" + '</span>';
                        }
                        else if (row.ExecStatus == "@ExecStatusEnumType.Finished.ParseToInt()") {
                            return '<span class="badge">' + "@ExecStatusEnumType.Finished.GetDescription()" + '</span>';
                        }
                      
                    }
                },
                //{
                //    field: 'CompositeStatus', title: '状态', width: '40px', formatter: function (value, row, index) {
                //        if (row.CompositeStatus == "@CompositeStatusEnumType.Ready.ParseToInt()") {
                //            if (row.IsConsumed == 1) {
                //                return '<span class="badge badge-inverse">' + "队列中..." + '</span>';
                //            }
                //            else {
                //                return '<span class="badge badge-white">' + "@CompositeStatusEnumType.Ready.GetDescription()" + '</span>';
                //            }

                //        }
                //        else if (row.CompositeStatus == "@CompositeStatusEnumType.Initing.ParseToInt()") {
                //            return '<span class="badge badge-info">' + "@CompositeStatusEnumType.Initing.GetDescription()" + '</span>';
                //        }
                //        else if (row.CompositeStatus == "@CompositeStatusEnumType.Running.ParseToInt()") {
                //            return '<span class="badge badge-primary">' + "@CompositeStatusEnumType.Running.GetDescription()" + '</span>';
                //        }
                //        else if (row.CompositeStatus == "@CompositeStatusEnumType.Paused.ParseToInt()") {
                //            return '<span class="badge badge-disable">' + "@CompositeStatusEnumType.Paused.GetDescription()" + '</span>';
                //        }
                //        //else if (row.CompositeStatus == "@CompositeStatusEnumType.Finished.ParseToInt()") {
                //        //    return '<span class="badge">' + "@CompositeStatusEnumType.Finished.GetDescription()" + '</span>';
                //        //}
                //        else if (row.CompositeStatus == "@CompositeStatusEnumType.Succeed.ParseToInt()") {
                //            return '<span class="badge badge-success">' + "@CompositeStatusEnumType.Succeed.GetDescription()" + '</span>';
                //        }
                //        else if (row.CompositeStatus == "@CompositeStatusEnumType.Failed.ParseToInt()") {
                //            return '<span class="badge badge-danger">' + "@CompositeStatusEnumType.Failed.GetDescription()" + '</span>';
                //        }
                //        else if (row.CompositeStatus == "@CompositeStatusEnumType.Cancelled.ParseToInt()") {
                //            return '<span class="badge badge-warning">' + "@CompositeStatusEnumType.Cancelled.GetDescription()" + '</span>';
                //        }
                //        else if (row.CompositeStatus == "@CompositeStatusEnumType.Aborted.ParseToInt()") {
                //            return '<span class="badge badge-warning">' + "@CompositeStatusEnumType.Aborted.GetDescription()" + '</span>';
                //        }
                //    }
                //},
                //{
                //    field: 'Reason', title: '结果'
                //    , cellStyle: function (value, row, index) {
                //        return {
                //            css: {
                //                //"min-width": "40px",
                //                "white-space": "nowrap",
                //                "text-overflow": "ellipsis",
                //                "overflow": "hidden",
                //                "max-width": "60px"
                //            }
                //        };
                //    }
                //    , formatter: function (value, row, index) {
                //        //获取备注内容
                //        var value = "" + value + "";
                //        //自定义单元格内容
                //        var span = document.createElement('span');
                //        //写入面板标题
                //        span.setAttribute('title', value);
                //        //写入面板内容
                //        span.innerHTML = value;
                //        //将面板返回至单元格展示
                //        return span.outerHTML;

                //    }
                //},
                {
                    field: 'TotalCaseCount', title: '进度', width: '100px', formatter: function (value, row, index) {
                        var r= '' ;
                        if (row.SucceedCaseCount > 0) {
                            r += '<span style="color:#1c84c6;padding:0px 1px;" title="成功个数">' + row.SucceedCaseCount + '</span>';
                        }
                        else {
                            r += '<span style="padding:0px 1px;" title="成功个数">' + row.SucceedCaseCount + '</span>';
                        }

                        if (row.FailedCaseCount>0)
                        {
                            r += '/' + '<span style="color:#ed5565;padding:0px 1px;" title="失败个数">' + row.FailedCaseCount + '</span>';
                        }
                        else
                        {
                            r += '/' + '<span style="padding:0px 1px;" title="失败个数">' + row.FailedCaseCount + '</span>';
                        }

                        if (row.CancelledCaseCount > 0) {
                            r += '/' + '<span style="color:#f8ac59;padding:0px 1px;" title="取消个数">' + row.CancelledCaseCount + '</span>';
                        }
                        else {
                            r += '/' + '<span style="padding:0px 1px;" title="取消个数">' + row.CancelledCaseCount + '</span>';
                        }

                        r += '/' + '<span style="padding:0px 1px;" title="总个数">' + row.TotalCaseCount + '</span>';
                        return r;
                    }
                },
                {
                    field: 'StartTime', title: '开始时间', width: '135px', formatter: function (value, row, index) {
                        return ys.formatDate(value, "yyyy-MM-dd HH:mm:ss");
                    }
                },
                {
                    field: 'EndTime', title: '结束时间', width: '135px', formatter: function (value, row, index) {
                        return ys.formatDate(value, "yyyy-MM-dd HH:mm:ss");
                    }
                },

                { field: 'CreatorUserName', title: '创建人', width: '40px', visible: false },
                {
                    field: 'BaseCreateTime', title: '创建时间', width: '135px', formatter: function (value, row, index) {
                        return ys.formatDate(value, "yyyy-MM-dd HH:mm:ss");
                    }
                },
                //{ field: 'BaseModifyTime', title: '修改时间' },
                {
                    title: '操作',
                    align: 'center',
                    width: '120px',
                    formatter: function (value, row, index) {
                        var actions = [];
                        if (row.FinishStatus == "@FinishStatusEnumType.None.ParseToInt()") {
                            actions.push('<a class="btn btn-primary btn-xs" href="#" onclick="cancelTask(\'' + row.Id + '\')" ><i class="fa fa-pause-circle-o"></i>取消</a> ');
                        }
                        actions.push('<a class="btn btn-primary btn-xs" href="#" onclick="openCaseExec(\'' + row.Guid + '\')" ><i class="fa fa-pause-circle-o"></i>作业</a> ');
                        return actions.join('');
                    }
                }
            ],
            queryParams: function (params) {
                var pagination = $('#gridTable').ysTable('getPagination', params);
                var queryString = $('#searchDiv').getWebControls(pagination);
                return queryString;
            }
        });
    }

    function searchGrid() {
        $('#gridTable').ysTable('search');
        resetToolbarStatus();
    }

    function showSaveForm(bAdd) {
        var id = 0;
        if (!bAdd) {
            var selectedRow = $('#gridTable').bootstrapTable('getSelections');
            if (!ys.checkRowEdit(selectedRow)) {
                return;
            }
            else {
                id = selectedRow[0].Id;
            }
        }
        ys.openDialog({
            title: id > 0 ? '编辑' : '添加',
            content: '@Url.Content("~/TestTaskManager/TaskExecRecord/TaskExecRecordForm")' + '?id=' + id,
            width: '768px',
            height: '550px',
            callback: function (index, layero) {
                var iframeWin = window[layero.find('iframe')[0]['name']];
                iframeWin.saveForm(index);
            }
        });
    }

    function deleteForm() {
        var selectedRow = $('#gridTable').bootstrapTable('getSelections');
        if (ys.checkRowDelete(selectedRow)) {
            ys.confirm('确认要删除选中的' + selectedRow.length + '条数据吗？', function () {
                var ids = ys.getIds(selectedRow);
                ys.ajax({
                    url: '@Url.Content("~/TestTaskManager/TaskExecRecord/DeleteFormJson")' + '?ids=' + ids,
                    type: 'post',
                    success: function (obj) {
                        if (obj.Status) {
                            ys.msgSuccess(obj.Message);
                            searchGrid();
                        }
                        else {
                            ys.msgError(obj.Message);
                        }
                    }
                });
            });
        }
    }
    function cancelTask(id) {
        ys.confirm('确认要取消选中的任务吗？', function () {
            ys.ajax({
                url: '@Url.Content("~/TestTaskManager/TaskExecRecord/CancelTaskJson")' + '?id=' + id,
                type: 'post',
                success: function (obj) {
                    if (obj.Status) {
                        ys.msgSuccess(obj.Message);
                        searchGrid();
                    }
                    else {
                        ys.msgError(obj.Message);
                    }
                }
            });
        });
    }
    function openCaseExec(guid) {
        var url = '@Url.Content("~/TestTaskManager/CaseExecRecord/CaseExecRecordIndex")' + '?taskExecGuid=' + guid;
        ys.openDialog({
            title: '作业',
            content: url,
            maxWidth:true,

            btn: '关闭',
            yes: function (index, layero) {
                //按钮【按钮一】的回调

            },
            callback: function (index, layero) {
                //var iframeWin = window[layero.find('iframe')[0]['name']];
                //iframeWin.saveForm(index);

                console.log(layero);
                layer.closeAll();
            }
        });
    }
</script>
